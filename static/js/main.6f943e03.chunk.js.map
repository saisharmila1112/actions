{"version":3,"sources":["components/layouts/button.js","components/layouts/accordion.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","button","textTransform","ButtonComponent","props","classes","Button","className","variant","onClick","ButtonName","data","ButtonText","console","log","wrapper","margin","width","accordion","backgroundColor","summary","fontSize","AccordionComponent","Accordion","defaultExpanded","index","AccordionSummary","expandIcon","Buttons","map","AccordionDetails","App","BuuttonData","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+y9BAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,cAAe,YAQnB,IAaeC,EAbS,SAACC,GACvB,IAAMC,EAAUP,IAChB,OACE,kBAACQ,EAAA,EAAD,CACEC,UAAWF,EAAQJ,OACnBO,QAAQ,WACRC,QAAS,kBAVMC,EAUYN,EAAMO,KAAKC,gBAT1CC,QAAQC,IAAIJ,GADd,IAAqBA,IAYdN,EAAMO,KAAKC,a,iBCdZd,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCe,QAAS,CACPC,OAAQ,QACRC,MAAO,QAETC,UAAW,CACTC,gBAAiB,WAEnBC,QAAS,CACPC,SAAU,cAcd,IAoBeC,EApBY,SAAClB,GAC1B,IAAMC,EAAUP,IAChB,OACE,yBAAKS,UAAWF,EAAQU,SACtB,kBAACQ,EAAA,EAAD,CACEhB,UAAWF,EAAQa,UACnBM,gBAAiC,IAAhBpB,EAAMqB,OAEvB,kBAACC,EAAA,EAAD,CACEnB,UAAWF,EAAQe,QACnBO,WAAY,kBAAC,IAAD,OAEXvB,EAAMO,KAAKC,YAEAR,EAAMO,KAAKiB,QAvBhBC,KAAI,SAAC5B,GAClB,OACE,kBAAC6B,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiBnB,KAAMV,WCNhB8B,MAdf,WAOE,OACE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,uBAPVyB,EAAYH,KAAI,SAACI,EAAMR,GAC5B,OAAO,kBAAC,EAAD,CAAoBA,MAAOA,EAAOd,KAAMsB,UCIjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.6f943e03.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    textTransform: \"none\",\r\n  },\r\n}));\r\n\r\nfunction HandleClick(ButtonName) {\r\n  console.log(ButtonName);\r\n}\r\n\r\nconst ButtonComponent = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Button\r\n      className={classes.button}\r\n      variant=\"outlined\"\r\n      onClick={() => HandleClick(props.data.ButtonText)}\r\n    >\r\n      {props.data.ButtonText}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import React from \"react\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ButtonComponent from \"./button\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  wrapper: {\r\n    margin: \".5rem\",\r\n    width: \"100%\",\r\n  },\r\n  accordion: {\r\n    backgroundColor: \"#dadada\",\r\n  },\r\n  summary: {\r\n    fontSize: \"1.2rem\",\r\n  },\r\n}));\r\n\r\nfunction ButtonMapper(buttons) {\r\n  return buttons.map((button) => {\r\n    return (\r\n      <AccordionDetails>\r\n        <ButtonComponent data={button} />\r\n      </AccordionDetails>\r\n    );\r\n  });\r\n}\r\n\r\nconst AccordionComponent = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <Accordion\r\n        className={classes.accordion}\r\n        defaultExpanded={props.index === 0}\r\n      >\r\n        <AccordionSummary\r\n          className={classes.summary}\r\n          expandIcon={<ExpandMoreIcon />}\r\n        >\r\n          {props.data.ButtonText}\r\n        </AccordionSummary>\r\n        {ButtonMapper(props.data.Buttons)}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccordionComponent;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BuuttonData from \"./data/qib3.json\";\nimport AccordionComponent from \"./components/layouts/accordion\";\n\nfunction App() {\n  function ButtonDataMapper() {\n    return BuuttonData.map((item, index) => {\n      return <AccordionComponent index={index} data={item} />;\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"accordion_container\">{ButtonDataMapper()}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}